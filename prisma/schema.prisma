// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ModelStatus {
  draft
  published
}

enum ServiceType {
  area
  perimeter
  fixed
}

enum ServiceUnit {
  unit
  sqm
  ml
}

/// Quote lifecycle status
/// - draft: Generated from cart, pending review/send (read-only, not editable)
/// - sent: Sent to vendor/client, awaiting response
/// - canceled: Canceled and no longer active
enum QuoteStatus {
  draft
  sent
  canceled
}

enum AdjustmentScope {
  item
  quote
}

enum AdjustmentSign {
  positive
  negative
}

/// @deprecated Use GlassSolution + GlassTypeSolution Many-to-Many instead.
/// This enum will be removed in v2.0. Maintained for backward compatibility only.
enum GlassPurpose {
  general
  insulation
  security
  decorative
}

enum PerformanceRating {
  basic
  standard
  good
  very_good
  excellent
}

enum CostType {
  fixed
  per_mm_width
  per_mm_height
  per_sqm
}

enum MaterialType {
  PVC
  ALUMINUM
  WOOD
  MIXED
}

/// User role in the system
/// - admin: Full access (models, all quotes, tenant config)
/// - seller: Limited access (own quotes, catalog)
/// - user: Client access (own quotes, catalog browsing)
enum UserRole {
  admin
  seller
  user
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String                  @id @default(cuid())
  name              String?
  email             String?                 @unique
  emailVerified     DateTime?
  image             String?
  role              UserRole                @default(user)
  accounts          Account[]
  sessions          Session[]
  quotes            Quote[]
  priceChanges      ModelPriceHistory[]
  glassPriceChanges GlassTypePriceHistory[]

  @@index([role])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Multi-Tenant Configuration (Single Tenant per deployment)
/// This is a singleton table that stores the tenant-level configuration.
/// In the current implementation, there should only be ONE record in this table with id = "1".
/// The fixed ID enforces the singleton pattern at the database level.
model TenantConfig {
  id String @id @default("1")

  /// Business/company name shown in quotes and invoices
  businessName String

  /// ISO 4217 currency code (3 characters): COP, USD, EUR, etc.
  currency String @db.Char(3)

  /// Number of days a quote is valid before expiring
  quoteValidityDays Int @default(15)

  /// IETF BCP 47 locale (es-CO, en-US, es-MX, etc.) for date/number formatting
  locale String @default("es-CO")

  /// IANA timezone identifier (America/Bogota, America/New_York, etc.)
  timezone String @default("America/Bogota")

  /// Optional contact information
  contactEmail    String?
  contactPhone    String?
  businessAddress String?

  /// Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([currency])
}

/// Profile Supplier
/// Represents manufacturers of window/door profiles (Rehau, Deceuninck, Azembla, etc.)
model ProfileSupplier {
  id           String       @id @default(cuid())
  /// Supplier name (Rehau, Deceuninck, Azembla, etc.)
  name         String       @unique
  /// Type of material the supplier provides
  materialType MaterialType
  /// Whether this supplier is active for selection
  isActive     Boolean      @default(true)
  /// Additional notes about the supplier
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  models       Model[]

  @@index([isActive])
  @@index([materialType])
}

/// @deprecated This model will be removed in v2.0. Migrated to TenantConfig + ProfileSupplier.
/// DO NOT use this model in new code. Use TenantConfig for business config and ProfileSupplier for profile manufacturers.
model Manufacturer {
  id                String   @id @default(cuid())
  name              String
  currency          String   @db.Char(3)
  quoteValidityDays Int      @default(15)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([currency])
}

model Model {
  id                     String               @id @default(cuid())
  profileSupplierId      String?
  profileSupplier        ProfileSupplier?     @relation(fields: [profileSupplierId], references: [id], onDelete: SetNull)
  name                   String
  status                 ModelStatus          @default(draft)
  minWidthMm             Int
  maxWidthMm             Int
  minHeightMm            Int
  maxHeightMm            Int
  basePrice              Decimal              @db.Decimal(12, 2)
  costPerMmWidth         Decimal              @db.Decimal(12, 4)
  costPerMmHeight        Decimal              @db.Decimal(12, 4)
  accessoryPrice         Decimal?             @db.Decimal(12, 2)
  /// Descuento fijo por lado para el cálculo del vidrio facturable (mm)
  /// Fórmula: anchoEfectivo = widthMm - glassDiscountWidthMm; altoEfectivo = heightMm - glassDiscountHeightMm
  /// El área de vidrio facturable se calcula con los valores efectivos (en m²) y se multiplica por el pricePerSqm del GlassType.
  glassDiscountWidthMm   Int                  @default(0)
  glassDiscountHeightMm  Int                  @default(0)
  compatibleGlassTypeIds String[]
  /// Margen de ganancia en porcentaje (ej: 30 = 30%)
  profitMarginPercentage Decimal?             @db.Decimal(5, 2)
  /// Fecha de la última revisión de costos
  lastCostReviewDate     DateTime?
  /// Notas sobre la estructura de costos
  costNotes              String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  quoteItems             QuoteItem[]
  costBreakdown          ModelCostBreakdown[]
  priceHistory           ModelPriceHistory[]

  // Performance indexes for admin table queries (TASK-011)
  @@index([profileSupplierId, status])
  @@index([name]) // Search by model name
  @@index([status]) // Filter by status (draft/published)
  @@index([createdAt(sort: Desc)]) // Sort by creation date
  @@index([updatedAt(sort: Desc)]) // Sort by last update
}

model GlassType {
  id                String                    @id @default(cuid())
  name              String
  /// @deprecated Use solutions relationship instead. This field will be removed in v2.0.
  /// Legacy single-purpose classification. Replaced by Many-to-Many GlassTypeSolution.
  /// Maintained for backward compatibility only.
  purpose           GlassPurpose
  thicknessMm       Int
  /// Precio por metro cuadrado del vidrio (referencia currency de TenantConfig)
  pricePerSqm       Decimal                   @db.Decimal(12, 2)
  /// Transmitancia térmica (W/m²·K) — opcional si aplica
  uValue            Decimal?                  @db.Decimal(5, 2)
  /// @deprecated Use characteristics relationship instead. Will be removed in v2.0.
  isTempered        Boolean                   @default(false)
  /// @deprecated Use characteristics relationship instead. Will be removed in v2.0.
  isLaminated       Boolean                   @default(false)
  /// @deprecated Use characteristics relationship instead. Will be removed in v2.0.
  isLowE            Boolean                   @default(false)
  /// @deprecated Use characteristics relationship instead. Will be removed in v2.0.
  isTripleGlazed    Boolean                   @default(false)
  // New fields for enhanced structure
  glassSupplierId   String?
  glassSupplier     GlassSupplier?            @relation(fields: [glassSupplierId], references: [id], onDelete: SetNull)
  /// SKU or product code from supplier
  sku               String?                   @unique
  /// Detailed description of the glass type
  description       String?
  /// Solar factor (g-value) — 0.00 to 1.00
  solarFactor       Decimal?                  @db.Decimal(4, 2)
  /// Light transmission percentage — 0.00 to 1.00
  lightTransmission Decimal?                  @db.Decimal(4, 2)
  /// Whether this glass type is active for selection
  isActive          Boolean                   @default(true)
  /// Date of last technical review
  lastReviewDate    DateTime?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  quoteItems        QuoteItem[]
  solutions         GlassTypeSolution[]
  characteristics   GlassTypeCharacteristic[]
  priceHistory      GlassTypePriceHistory[]

  // Performance indexes for admin table queries (TASK-012)
  @@index([name]) // Search by glass type name
  @@index([purpose]) // Filter by purpose (deprecated but still indexed)
  @@index([glassSupplierId]) // Filter by supplier
  @@index([isActive]) // Filter by active status
  @@index([thicknessMm]) // Sort/filter by thickness
  @@index([createdAt(sort: Desc)]) // Sort by creation date
  @@index([updatedAt(sort: Desc)]) // Sort by last update
  @@index([sku]) // Unique SKU lookup
}

model Service {
  id            String             @id @default(cuid())
  name          String
  type          ServiceType
  unit          ServiceUnit
  rate          Decimal            @db.Decimal(12, 4)
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  quoteServices QuoteItemService[]

  @@index([isActive])
}

model Quote {
  id             String      @id @default(cuid())
  userId         String?
  user           User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  status         QuoteStatus @default(draft)
  currency       String      @db.Char(3)
  total          Decimal     @default(0) @db.Decimal(12, 2)
  validUntil     DateTime?
  contactPhone   String?
  /// @deprecated Use structured project fields instead. Will be removed in v2.0.
  contactAddress String?

  // Project information (structured address fields)
  projectName       String? @db.VarChar(100)
  projectStreet     String? @db.VarChar(200)
  projectCity       String? @db.VarChar(100)
  projectState      String? @db.VarChar(100)
  projectPostalCode String? @db.VarChar(20)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sentAt      DateTime? // Timestamp when quote was sent to vendor (Feature 005)
  items       QuoteItem[]
  adjustments Adjustment[]

  // Performance indexes for quote queries (TASK-013)
  @@index([userId]) // Original index
  @@index([userId, status]) // Composite index for filtering by user + status
  @@index([userId, createdAt(sort: Desc)]) // Optimized for sorting by createdAt DESC
  @@index([userId, validUntil]) // Optimized for expired quotes filtering
  @@index([projectName]) // Search by project name
  @@index([status]) // Filter by status (draft/sent/canceled)
  @@index([createdAt(sort: Desc)]) // Sort by creation date (all quotes)
}

model QuoteItem {
  id          String    @id @default(cuid())
  quoteId     String
  quote       Quote     @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  modelId     String
  model       Model     @relation(fields: [modelId], references: [id], onDelete: Restrict)
  glassTypeId String
  glassType   GlassType @relation(fields: [glassTypeId], references: [id], onDelete: Restrict)

  // User-editable item identification
  name     String @db.VarChar(50)
  quantity Int    @default(1)

  widthMm          Int
  heightMm         Int
  accessoryApplied Boolean            @default(false)
  subtotal         Decimal            @db.Decimal(12, 2)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  services         QuoteItemService[]
  adjustments      Adjustment[]

  @@index([quoteId])
}

model QuoteItemService {
  id          String      @id @default(cuid())
  quoteItemId String
  quoteItem   QuoteItem   @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  serviceId   String
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  unit        ServiceUnit
  quantity    Decimal     @db.Decimal(12, 4)
  amount      Decimal     @db.Decimal(12, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([quoteItemId, serviceId])
}

model Adjustment {
  id          String          @id @default(cuid())
  scope       AdjustmentScope
  concept     String
  unit        ServiceUnit
  value       Decimal         @db.Decimal(12, 4)
  sign        AdjustmentSign
  quoteId     String?
  quote       Quote?          @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteItemId String?
  quoteItem   QuoteItem?      @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  amount      Decimal         @db.Decimal(12, 2)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([quoteId])
  @@index([quoteItemId])
}

/// Desglose de componentes de costo para cada modelo
/// Permite al admin definir y ajustar cada componente que conforma el precio final
model ModelCostBreakdown {
  id        String   @id @default(cuid())
  modelId   String
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  /// Nombre del componente: 'perfil_vertical', 'perfil_horizontal', 'esquineros', 'herrajes', 'mano_obra', etc.
  component String
  /// Tipo de costo: fixed, per_mm_width, per_mm_height, per_sqm
  costType  CostType
  /// Costo unitario del componente (en la moneda del fabricante)
  unitCost  Decimal  @db.Decimal(12, 4)
  /// Notas adicionales sobre este componente
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([modelId])
  @@index([modelId, costType])
}

/// Historial de cambios de precio de los modelos
/// Permite rastrear cuándo y por qué cambiaron los precios
model ModelPriceHistory {
  id              String   @id @default(cuid())
  modelId         String
  model           Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  /// Precio base en el momento del cambio
  basePrice       Decimal  @db.Decimal(12, 2)
  /// Costo por mm de ancho en el momento del cambio
  costPerMmWidth  Decimal  @db.Decimal(12, 4)
  /// Costo por mm de alto en el momento del cambio
  costPerMmHeight Decimal  @db.Decimal(12, 4)
  /// Razón del cambio: 'aumento_material', 'ajuste_mercado', 'promocion', etc.
  reason          String?
  /// Fecha desde la cual este precio es efectivo
  effectiveFrom   DateTime
  /// Usuario que realizó el cambio
  createdBy       String?
  createdByUser   User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  createdAt       DateTime @default(now())

  @@index([modelId, effectiveFrom])
  @@index([createdBy])
}

/// Soluciones de vidrio (categorías de uso)
/// Permite clasificar vidrios según su propósito principal (seguridad, térmico, acústico, etc.)
model GlassSolution {
  id          String              @id @default(cuid())
  /// Clave única para identificar la solución (ej: 'security', 'thermal_insulation')
  key         String              @unique
  /// Nombre técnico en inglés
  name        String
  /// Nombre comercial en español
  nameEs      String
  /// Descripción de la solución
  description String?
  /// Icono de Lucide React (ej: 'Shield', 'Snowflake')
  icon        String?
  /// Orden de visualización (menor = más arriba)
  sortOrder   Int                 @default(0)
  /// Si la solución está activa para mostrarse a usuarios
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  glassTypes  GlassTypeSolution[]

  @@index([sortOrder])
  @@index([isActive])
}

/// Tabla pivote: Relación Many-to-Many entre GlassType y GlassSolution
/// Permite que un vidrio pertenezca a múltiples soluciones con calificación de rendimiento
model GlassTypeSolution {
  id                String            @id @default(cuid())
  glassTypeId       String
  glassType         GlassType         @relation(fields: [glassTypeId], references: [id], onDelete: Cascade)
  solutionId        String
  solution          GlassSolution     @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  /// Calificación de rendimiento para esta solución (1-5)
  performanceRating PerformanceRating
  /// Indica si esta es la solución principal del vidrio
  isPrimary         Boolean           @default(false)
  /// Notas adicionales sobre esta clasificación
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([glassTypeId, solutionId])
  @@index([glassTypeId])
  @@index([solutionId])
  @@index([isPrimary])
}

/// Glass Supplier
/// Represents glass manufacturers (Guardian, Saint-Gobain, Pilkington, AGC, Vitro, etc.)
model GlassSupplier {
  id           String      @id @default(cuid())
  /// Supplier name (Guardian, Saint-Gobain, Pilkington, etc.)
  name         String      @unique
  /// Short code for the supplier (e.g., 'GRD' for Guardian)
  code         String?     @unique
  /// Country where the supplier is based
  country      String?
  /// Official website URL
  website      String?
  /// Contact email for orders/inquiries
  contactEmail String?
  /// Contact phone number
  contactPhone String?
  /// Whether this supplier is active for selection
  isActive     Boolean     @default(true)
  /// Additional notes about the supplier
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  glassTypes   GlassType[]

  @@index([isActive])
  @@index([code])
}

/// Glass Characteristic
/// Flexible characteristic definitions for glass properties (tempered, laminated, low-e, etc.)
/// Replaces rigid boolean fields with extensible Many-to-Many relationship
model GlassCharacteristic {
  id          String                    @id @default(cuid())
  /// Unique key for the characteristic (e.g., 'tempered', 'laminated', 'low_e')
  key         String                    @unique
  /// Technical name in English
  name        String
  /// Commercial name in Spanish
  nameEs      String
  /// Description of the characteristic
  description String?
  /// Category grouping (e.g., 'safety', 'thermal', 'acoustic', 'coating')
  category    String
  /// Whether this characteristic is active for assignment
  isActive    Boolean                   @default(true)
  /// Display order (lower = higher priority)
  sortOrder   Int                       @default(0)
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  glassTypes  GlassTypeCharacteristic[]

  @@index([category])
  @@index([isActive])
}

/// Glass Type Characteristic (Pivot Table)
/// Many-to-Many relationship between GlassType and GlassCharacteristic
/// Allows a glass type to have multiple characteristics with optional values
model GlassTypeCharacteristic {
  id               String              @id @default(cuid())
  glassTypeId      String
  glassType        GlassType           @relation(fields: [glassTypeId], references: [id], onDelete: Cascade)
  characteristicId String
  characteristic   GlassCharacteristic @relation(fields: [characteristicId], references: [id], onDelete: Cascade)
  /// Optional value for the characteristic (e.g., '6.38mm' for laminated thickness)
  value            String?
  /// Optional certification reference (e.g., 'EN 12150' for tempered glass)
  certification    String?
  /// Additional notes about this characteristic application
  notes            String?
  createdAt        DateTime            @default(now())

  @@unique([glassTypeId, characteristicId])
  @@index([glassTypeId])
  @@index([characteristicId])
}

/// Glass Type Price History
/// Tracks price changes over time with audit trail
model GlassTypePriceHistory {
  id            String    @id @default(cuid())
  glassTypeId   String
  glassType     GlassType @relation(fields: [glassTypeId], references: [id], onDelete: Cascade)
  /// Price per square meter at the time of this record
  pricePerSqm   Decimal   @db.Decimal(12, 2)
  /// Reason for the price change (e.g., 'material cost increase', 'market adjustment')
  reason        String?
  /// Date from which this price is effective
  effectiveFrom DateTime
  /// User who created this price record
  createdBy     String?
  createdByUser User?     @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  createdAt     DateTime  @default(now())

  @@index([glassTypeId, effectiveFrom])
  @@index([createdBy])
}
