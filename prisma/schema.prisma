// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum ModelStatus {
  draft
  published
}

enum ServiceType {
  area
  perimeter
  fixed
}

enum ServiceUnit {
  unit
  sqm
  ml
}

enum QuoteStatus {
  draft
  sent
  canceled
}

enum AdjustmentScope {
  item
  quote
}

enum AdjustmentSign {
  positive
  negative
}

enum GlassPurpose {
  general
  insulation
  security
  decorative
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  manufacturerId String?
  manufacturer   Manufacturer? @relation(fields: [manufacturerId], references: [id], onDelete: SetNull)
  quotes         Quote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Manufacturer {
  id                String      @id @default(cuid())
  name              String
  currency          String      @db.Char(3)
  quoteValidityDays Int         @default(15)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  models            Model[]
  glassTypes        GlassType[]
  services          Service[]
  quotes            Quote[]
  users             User[]

  @@index([currency])
}

model Model {
  id                     String       @id @default(cuid())
  manufacturerId         String
  manufacturer           Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  name                   String
  status                 ModelStatus  @default(draft)
  minWidthMm             Int
  maxWidthMm             Int
  minHeightMm            Int
  maxHeightMm            Int
  basePrice              Decimal      @db.Decimal(12, 2)
  costPerMmWidth         Decimal      @db.Decimal(12, 4)
  costPerMmHeight        Decimal      @db.Decimal(12, 4)
  accessoryPrice         Decimal?     @db.Decimal(12, 2)
  compatibleGlassTypeIds String[]
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  quoteItems             QuoteItem[]

  @@index([manufacturerId, status])
}

model GlassType {
  id             String       @id @default(cuid())
  manufacturerId String
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  name           String
  purpose        GlassPurpose
  thicknessMm    Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  quoteItems     QuoteItem[]

  @@index([manufacturerId, purpose])
}

model Service {
  id             String             @id @default(cuid())
  manufacturerId String
  manufacturer   Manufacturer       @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  name           String
  type           ServiceType
  unit           ServiceUnit
  rate           Decimal            @db.Decimal(12, 4)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  quoteServices  QuoteItemService[]

  @@index([manufacturerId, type])
}

model Quote {
  id             String       @id @default(cuid())
  manufacturerId String
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  status         QuoteStatus  @default(draft)
  currency       String       @db.Char(3)
  total          Decimal      @default(0) @db.Decimal(12, 2)
  validUntil     DateTime?
  contactPhone   String?
  contactAddress String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  items          QuoteItem[]
  adjustments    Adjustment[]

  @@index([manufacturerId, status])
}

model QuoteItem {
  id               String             @id @default(cuid())
  quoteId          String
  quote            Quote              @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  modelId          String
  model            Model              @relation(fields: [modelId], references: [id], onDelete: Restrict)
  glassTypeId      String
  glassType        GlassType          @relation(fields: [glassTypeId], references: [id], onDelete: Restrict)
  widthMm          Int
  heightMm         Int
  accessoryApplied Boolean            @default(false)
  subtotal         Decimal            @db.Decimal(12, 2)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  services         QuoteItemService[]
  adjustments      Adjustment[]

  @@index([quoteId])
}

model QuoteItemService {
  id          String      @id @default(cuid())
  quoteItemId String
  quoteItem   QuoteItem   @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  serviceId   String
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  unit        ServiceUnit
  quantity    Decimal     @db.Decimal(12, 4)
  amount      Decimal     @db.Decimal(12, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([quoteItemId, serviceId])
}

model Adjustment {
  id          String          @id @default(cuid())
  scope       AdjustmentScope
  concept     String
  unit        ServiceUnit
  value       Decimal         @db.Decimal(12, 4)
  sign        AdjustmentSign
  quoteId     String?
  quote       Quote?          @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteItemId String?
  quoteItem   QuoteItem?      @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  amount      Decimal         @db.Decimal(12, 2)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([quoteId])
  @@index([quoteItemId])
}
